install.packages("devtools")
install.packages("KernSmooth")
library("KernSmooth", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("rnn")
library(rnn)
trainr
?trainr
X1 = sample(0:127, 7000, replace=TRUE)
X2 = sample(0:127, 7000, replace=TRUE)
Y <- X1 + X2
X1 <- int2bin(X1, length=8)
X2 <- int2bin(X2, length=8)
Y  <- int2bin(Y,  length=8)
X <- array( c(X1,X2), dim=c(dim(X1),2) )
model <- trainr(Y=Y,
X=X,
learningrate   =  0.1,
hidden_dim     = 10,
start_from_end = TRUE )
plot(colMeans(model$error),type='l',
xlab='epoch',
ylab='errors'                  )
A1 = int2bin( sample(0:127, 7000, replace=TRUE) )
A2 = int2bin( sample(0:127, 7000, replace=TRUE) )
A <- array( c(A1,A2), dim=c(dim(A1),2) )
B  <- predictr(model,
A     )
A1 <- bin2int(A1)
A2 <- bin2int(A2)
B  <- bin2int(B)
hist( B-(A1+A2) )
detach("package:rnn", unload=TRUE)
install.packages("RSNNS")
install.packages("hydroGOF")
?mlp
??mlp
??mlp
View(iris)
View(outputs)
View(predictions)
View(inputs)
errror
error
patset
snnsObject
res
patset
View(iris)
View(iris)
class(iris)
View(outputs)
class(output)
class(outputs)
class(inputs)
View(predictions)
View(outputs)
View(outputs)
View(predictions)
View(inputs)
install.packages("sigmoid")
library("sigmoid", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
a <- seq(-10,10)
( b <- sigmoid(a) )
plot(b)
hist( a - sigmoid(b, inverse=TRUE) )
( c <- sigmoid(a, SoftMax=TRUE) )
plot(c)
args(sigmoid)
?sigmoid
??sigmoid
x = seq(1,5, by=0.05)
qplot(sigmoid(x))
x = seq(1,5, by=0.05)
plot(sigmoid(x))
plot(sigmoid(c))
x <- seq(-5, 5, 0.01)
plot(x, sigmoid(x), col='blue')
plot(x,name, col='blue')
plot(x, sigmoid(x), col='red')
summary(model)
library("nnet")
library(nnet)
mod <- nnet(Y1 ~ X1 + X2 + X3, data = neuraldat, size = 1
)
library(nnet)
mod <- nnet(Y1 ~ X1 + X2 + X3, data = neuraldat, size = 10)
library(NeuralNetTools)
data(neuraldat)
library(nnet)
mod <- nnet(Y1 ~ X1 + X2 + X3, data = neuraldat, size = 10)
par(mar = numeric(4))
plotnet(mod)
library(nnet)
mod <- nnet(Y1 ~ X1 + X2 + X3+ X4, data = neuraldat, size = 10)
nerualdat
neuraldat
head(neuraldat)
library(nnet)
mod <- nnet(Y1 ~ X1 + X2 + X3+ Y1, Y2, data = neuraldat, size = 10)
par(mar = numeric(4))
plotnet(mod)
plotnet(mod)
?neuralnet
??neuralnet
?rnn
??rnn
?lapply
?slip
?split
args(lapply)
str(split)
x <- c(rnorm(10), runif(10),rnorm(10,1))
f <- gl(3,10)
split(x,gl)
split(x,f)
f
?gl
a <-gl(5,1)
a
a <-gl(5,5)
a
gl(10,5)
a <- gl(2,2,20)
a
lapply(split(x,f),mean)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans (x[,c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans (x[,c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans (x[,c("Ozone", "Solar.R", "Wind")] na.rm = TRUE))
sapply(s, function(x) colMeans (x[,c("Ozone", "Solar.R", "Wind")] na.rm = TRUE))
sapply(s, function(x) colMeans (x[,c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
?interaction
swirl()
swirl::play()
library(swirl)
swirl()
1
swirl()
main
quit
quit
main()
quit()
library("swirl")
swirl()
main()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6,))
unique(c(3,4,5,5,5,6,6,4))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply((unique_vals, function(elem) elem[2])
lapply((unique_vals,function(elem) elem[2])
lapply((unique_vals, function(elem) elem[2])
unique_vals
lapply(unique_vals, function(elem) elem[2])
main()
main()
sapply(flags,unique)
vapply(flags,unique, numeric(1))
ok()
sapply(flags,class)
sapply(flags,class, character(1))
ok()
vapply(flags,class, character(1))
?tapply
flags$landmass
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass , mean)
tapply(flags$population,flags$red, summary)
tapply(flags$population,flags$landmass, summary)
library(datasets)
data(iris)
library(datasets)
data(iris)
?iris
a <- iris$Sepal.Length
mean(a)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
?abs
str(abs)
a <- with(mtcars, tapply(mpg, cyl, mean))
dim(a)
class(a)
a[0,1]
a[1,1]
a[,1]
a[2,]
a[2]
a[2][1]
a[2][2]
a[2][2]
a[3]
abs(15.1)
lapply(a,abs)
sapply(a,abs)
b <- sapply(a,abs)
b
dim(b)
class(b)
b <- lapply(a,abs)
class(b)
b[1]
b$`8` - b$`4`
b$`4` - b$`8`
debug(ls)
ls
debug(ls)
ls
ls
ls
ls
ls
ls
ls
ls
ls
ls
ls
ls
ls
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
?xml
??xml
install.packages("XLConnect")
install.packages(c("xlsx", "XLConnect"))
install.packages("xlsx")
R CMD javareconf -e
setwd("~/Desktop/R programming/Data Science Specalization Coursera/Course 3")
library("dplyr")
gdp <- read.csv("gdp.csv", header = T)
gdp <- tbl_df(gdp)
gdp <- rename(gdp, CountryCode = X , Ranking = Gross.domestic.product.2012, Economy = X.2 , USD = X.3 )
gdp <- select(gdp, CountryCode, Ranking, Economy)
edu <- read.csv("edu.csv")
edu <- tbl_df(edu)
gdp <- filter(gdp, !is.na(CountryCode), !is.na(Ranking), !is.na(Economy))
gdp
gdp <- gdp[-(1:4),]
gdp
?match
?group_by
?merge
newdf <- merge(edu,gdp, by = CountryCode)
newdf <- merge(edu,gdp, by = gdp$CountryCode)
newdf <- merge(edu,gdp, by.x =  edu$CountryCode)
newdf <- merge(edu,gdp, by.x =  edu$CountryCode, by.y = gdp$CountryCode)
newdf <- merge(edu,gdp)
newdf
head(newdf)
View(newdf)
names(newdf)
newdf <- merge(edu,gdp,by = intersect(names(gdp), names(edu)))
count(newdf$CountryCode)
newdf <- merge(edu,gdp,by = intersect(names(gdp), names(edu)),all = T, all.x = all, all.y = all)
newdf <- merge(edu,gdp,by = intersect(names(gdp), names(edu)), all.x = T, all.y = T)
newdf <- merge(edu,gdp,by = intersect(names(gdp), names(edu)))
newdf <- merge(edu,gdp,by = intersect(names(edu), names(gdp)))
?match
newdf <- edu %in% gdp
which(newdf)
newdf <-   gdp$CountryCode %in% edu$CountryCode
newdf
which(newdf)
length(which(newdf))
newdf <- merge(edu,gdp)
?arrange
?n()
?order
?arrange
names(newdf)
newdf <- arrange(newdf, desc(Ranking))
View(newdf)
newdf[13,2]
arrange(newdf, desc(Ranking))
a<-order(newdf, desc(newdf$Ranking))
arrange(newdf
)
a <- arrange(newdf)
View(a)
?arrange
?order
newdf[order(newdf$Ranking),]
View(newdf)
class(newdf$Ranking)
newdf[,"Ranking"]
newdf[,"Ranking"] <- as.numeric(newdf[,"Ranking"])
newdf <- arrange(newdf, desc(Ranking))
View(newdf)
newdf[13,2]
gdp <- rename(gdp, CountryCode = X , Ranking = Gross.domestic.product.2012, Economy = X.2 , USD = X.3 )
if(!file.exists("gdp.csv")){
file.create("gdp.csv")
}
url <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(url, destfile = "gdp.csv", method = "curl")
gdp <- read.csv("gdp.csv", header = T)
gdp <- tbl_df(gdp)
View(gdp)
View(gdp)
if(!file.exists("edu.csv")){
file.create("edu.csv")
}
url <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(url, destfile = "edu.csv", method = "curl")
edu <- read.csv("edu.csv")
edu <- tbl_df(edu)
View(edu)
View(edu)
View(gdp)
mergedData <- merge(gpd, edu, by.x="CountryCode", by.y="CountryCode", all=FALSE)
mergedData <- merge(gpp, edu, by.x="CountryCode", by.y="CountryCode", all=FALSE)
newdf <- merge(gdp, edu, by.x="CountryCode", by.y="CountryCode", all=FALSE)
gdp <- rename(gdp, CountryCode = X , Ranking = Gross.domestic.product.2012, Economy = X.2 , USD = X.3 )
gdp <- select(gdp, CountryCode, Ranking, Economy)
gdp <- gdp[-(1:4),]
newdf <- merge(gdp, edu, by.x="CountryCode", by.y="CountryCode", all=FALSE)
newdf <- merge(gdp, edu, all = TRUE, by = c("CountryCode"))
sum(!is.na(unique(newdf$Ranking)))
newdf <- merge(gdp, edu, by.x="CountryCode", by.y="CountryCode", all=FALSE)
?gsub
mergedData  <- merge(gdp, edu, by.x="CountryCode", by.y="CountryCode", all=FALSE)
mergedData$Ranking <- gsub(",", "", mergedData$Ranking)
mergedData$Ranking <- as.numeric(mergedData$Ranking)
nrow(mergedData[!is.na(mergedData$Ranking),])
mergedData <- mergedData[order(mergedData$Ranking, decreasing=TRUE, na.last = TRUE),]
mergedData$Long.Name[13]
View(mergedData)
View(mergedData)
class(mergedData$Ranking)
class(newdf$Ranking)
newdf$Ranking <- gsub(",", "", newdf$Ranking)
newdf[,"Ranking"] <- as.numeric(newdf[,"Ranking"])
newdf <- arrange(newdf, desc(Ranking))
newdf[13,2]
newdf[13,]
newdf[13,3]
nrow(newdf[!is.na(newdf$Ranking),])
newdf[, mean(Ranking, na.rm = TRUE), by = Income.Group]
data.table(newdf)[, mean(Ranking, na.rm = TRUE), by=Income.Group][c(6,2)]
library(data.table)
data.table(newdf)[, mean(Ranking, na.rm = TRUE), by=Income.Group][c(6,2)]
HO <- filter(newdf, Income.Group == "High income: OECD")
HNO <- filter(newdf, Income.Group == "High income: nonOECD")
HoR <- select(HO, Ranking)
HnoR <- select(HNO, Ranking)
HoR
mean(HoR); mean(HnoR)
class(HoR)
mean(HoR$Ranking); mean(HnoR$Ranking)
?mean
mean(HnoR$Ranking, na.rm = T)
?quantile
?quantile(newdf$Ranking, probs= seq(0,1,0.2), na.rm = T)
quantile(newdf$Ranking, probs= seq(0,1,0.2), na.rm = T)
?cut
newdf$quantileGDP <- cut(data2$rankingGDP, breaks = breaks)
newdf$quantileGDP <- cut(newdf$rankingGDP, breaks = breaks)
cut(rep(1,5), 4)
newdf$quantilDP <- cut(newdf$Ranking, breaks = breaks)
breaks <- quantile(newdf$Ranking, probs= seq(0,1,0.2), na.rm = T)
newdf$quantilDP <- cut(newdf$Ranking, breaks = breaks)
?.N
??.N
?data.table
dt <- data.table(a = LETTERS[c(1,1:3)], b = 4:7)
dt[.N]
dt
dt[, new_var := .N, by = a]
dt
newdf[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantileGDP")]
View(newdf)
newdf[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantilDP")]
newdf[Income.Group == "Lower middle income", .N]
breaks <- quantile(newdf$Ranking, probs = seq(0, 1, 0.2), na.rm = TRUE)
data2$quantileGDP <- cut(newdf$Ranking, breaks = breaks)
newdf[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantileGDP")]
beaks
breaks
new <- c(newdf$Ranking,newdf$quantilDP)
hea(new)
head(new)
View(newdf)
new <- select(newdf, Ranking, quantilGD, Income.Group)
new <- select(newdf, Ranking, quantilDP, Income.Group)
head(new)
new <- filter(newdf, Income.Group == "Lower middle income")
head(new)
new <- filter(new, Income.Group == "Lower middle income")
head(new)
new <- filter(new, Income.Group == "Lower middle income")
View(new)
new <- select(newdf, Ranking, quantilDP, Income.Group)
new <- filter(new, Income.Group == "Lower middle income")
head(new)
?filter
new <- filter(new, Income.Group == "Lower middle income", na.rm = T)
?select
54 - 37
54 - 49
49 - 37
count(new$quantilDP[37:49])
length(new$quantilDP[37:49])
data <- read.csv("ansuv.csv")
data <- tbl_df(data)
req <- select(data, AGS, ACR)
agricultureLogical <- req$AGS == 6 & req$ACR == 3
result <- which(agricultureLogical)
head(result, n=3)
HO <- filter(newdf, Income.Group == "High income: OECD")
HNO <- filter(newdf, Income.Group == "High income: nonOECD")
HoR <- select(HO, Ranking)
HnoR <- select(HNO, Ranking)
mean(HoR$Ranking); mean(HnoR$Ranking, na.rm = T)
